openapi: 3.0.3
info:
  title: Bank API
  description: Bank Application
  version: 1.0
servers:
  - url: http://localhost:8080
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: new_user
        password:
          type: string
          example: password123

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: test_user
        email:
          type: string
          format: email
          maxLength: 100
          example: test_user@example.com
        password:
          type: string
          minLength: 8
          maxLength: 100
          example: password123

    TokenPair:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Operation completed successfully

    # Card
    CardRequest:
      type: object
      required:
        - ownerId
      properties:
        ownerId:
          type: integer
          example: 1

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        maskedNumber:
          type: string
          example: "**** **** **** 1234"
        ownerId:
          type: integer
          example: 2
        expirationDate:
          type: string
          format: date
          example: 2028-06-01
        balance:
          type: number
          format: float
          example: 1500.75
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
          example: ACTIVE

    CardUpdateRequest:
      type: object
      properties:
        expirationDate:
          type: string
          format: date
          example: 2028-06-01
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
          example: ACTIVE

    # Block Orders
    BlockOrderRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        cardId:
          type: integer
          example: 2
        requestedById:
          type: integer
          example: 3
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
          example: PENDING

    # Transfers
    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          example: 1
        toCardId:
          type: integer
          example: 2
        amount:
          type: number
          format: float
          example: 50.00

    TransferResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Transfer successful
        timestamp:
          type: string
          format: date-time
          example: 2025-06-01T07:38:00

    # User
    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 6
          maxLength: 255
          example: new_user
        email:
          type: string
          format: email
          maxLength: 255
          example: user@example.com
        password:
          type: string
          minLength: 6
          maxLength: 255
          example: securePassword123

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: test_user
        email:
          type: string
          example: test_user@example.com
        role:
          type: string
          enum: [ROLE_USER, ROLE_ADMIN]
          example: ROLE_USER

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          nullable: true
          maxLength: 255
          example: updated_username
        email:
          type: string
          nullable: true
          format: email
          maxLength: 255
          example: new_email@example.com
        password:
          type: string
          nullable: true
          minLength: 6
          maxLength: 255
          example: securePassword1234
        role:
          type: string
          nullable: true
          enum: [ROLE_USER, ROLE_ADMIN]
          example: ROLE_ADMIN

    # Balance & Deposit
    BalanceResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Balance retrieved successfully
        balance:
          type: number
          format: float
          example: 2434.11

    DepositRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
          example: 100.50

    DepositResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Deposit successful
        newBalance:
          type: number
          format: float
          example: 1600.25

security:
  - bearerAuth: []

paths:
  # Authentication
  /api/v1/auth/register:
    post:
      tags: [Auth Controller]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error or user already exists

  /api/v1/auth/login:
    post:
      tags: [Auth Controller]
      summary: Authenticate a user and obtain tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPair'
        '401':
          description: Invalid credentials

  /api/v1/auth/refresh-token:
    post:
      tags: [Auth Controller]
      summary: Refresh access token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPair'
        '401':
          description: Invalid refresh token

  # Cards
  /api/v1/cards:
    get:
      tags: [Card Controller]
      summary: Get all cards (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
        '403':
          description: Forbidden (requires ADMIN role)

    post:
      tags: [Card Controller]
      summary: Create a new card (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
      responses:
        '200':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '403':
          description: Forbidden (requires ADMIN role)

  /api/v1/cards/{id}:
    get:
      tags: [Card Controller]
      summary: Get card by id (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '403':
          description: Forbidden (requires ADMIN role)
        '404':
          description: Card not found

    put:
      tags: [Card Controller]
      summary: Update card details (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdateRequest'
      responses:
        '200':
          description: Card updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '403':
          description: Forbidden
        '404':
          description: Card not found

    delete:
      tags: [Card Controller]
      summary: Delete card (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Card deleted
        '403':
          description: Forbidden
        '404':
          description: Card not found

  /api/v1/cards/my:
    get:
      tags: [Card Controller]
      summary: View cards for the current user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: User's cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
        '401':
          description: Unauthorized

  /api/v1/cards/{id}/block:
    post:
      tags: [Card Controller]
      summary: Block card (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Card blocked
        '403':
          description: Forbidden
        '404':
          description: Card not found

  /api/v1/cards/{id}/activate:
    post:
      tags: [Card Controller]
      summary: Activate card (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Card activated
        '403':
          description: Forbidden
        '404':
          description: Card not found

  /api/v1/cards/{id}/request-block:
    post:
      tags: [Card Controller]
      summary: Submit request to block card
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Block request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockOrderRequest'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Card not found

  /api/v1/cards/{id}/deposit:
    post:
      tags: [Card Controller]
      summary: Top up card balance
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '200':
          description: Deposit successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositResponse'
        '400':
          description: Validation error
        '403':
          description: Forbidden (not card owner)
        '404':
          description: Card not found

  /api/v1/cards/{id}/balance:
    get:
      tags: [Card Controller]
      summary: View card balance
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Balance information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '403':
          description: Forbidden (not card owner)
        '404':
          description: Card not found

  # Block Requests
  /api/v1/block-requests:
    get:
      tags: [BlockRequest Controller]
      summary: Get pending block requests (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of pending requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockOrderRequest'
        '403':
          description: Forbidden

  /api/v1/block-requests/{id}/approve:
    post:
      tags: [BlockRequest Controller]
      summary: Approve block request (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Request approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: Forbidden
        '404':
          description: Request not found

  /api/v1/block-requests/{id}/reject:
    post:
      tags: [BlockRequest Controller]
      summary: Reject block request (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Request rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: Forbidden
        '404':
          description: Request not found

  # Transfers
  /api/v1/transfers:
    post:
      tags: [Transfer Controller]
      summary: Transfer between user's cards
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Transfer successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '400':
          description: Validation error
        '403':
          description: Forbidden (invalid card ownership)

  # Users
  /api/v1/users:
    get:
      tags: [User Controller]
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden

    post:
      tags: [User Controller]
      summary: Create new user (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
        '400':
          description: Validation error
        '403':
          description: Forbidden

  /api/v1/users/{id}:
    get:
      tags: [User Controller]
      summary: Get user by id (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden
        '404':
          description: User not found

    put:
      tags: [User Controller]
      summary: Update user (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
        '403':
          description: Forbidden
        '404':
          description: User not found

    delete:
      tags: [User Controller]
      summary: Delete user (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '403':
          description: Forbidden
        '404':
          description: User not found

  /api/v1/users/username/{username}:
    get:
      tags: [User Controller]
      summary: Get user by username (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden
        '404':
          description: User not found

  /api/v1/users/email/{email}:
    get:
      tags: [User Controller]
      summary: Get user by email (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden
        '404':
          description: User not found